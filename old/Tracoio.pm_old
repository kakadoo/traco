package Tracoio;
# $Revision: 00001 $
# $Source: /home/glaess/perl/vdr/traco/Tracoio.pm $
# $Id: Holger Glaess $
use strict;
use warnings;
use English '-no_match_vars';
use Carp;
use Cwd;
use feature qw/switch/;
#use File::Find;
use File::Basename;
#use Data::Dumper;
use File::Glob ':glob';
use Fcntl ':flock';
use Config;
use constant {BUFFERSIZE => 32_768, BYTESHIFT => 16_777_216, ACHT => 8,};

require Exporter;
use vars qw($VERSION @ISA @EXPORT_OK);
use base qw(Exporter);
@EXPORT_OK = qw(_combine_ts _readfile _writefile _get_files_in_dir _get_filename_by_cutfilenumber _cutfile);

$VERSION = '0.01';

#
# 0.01 inital version
#

sub new {
	my ($class,$args) = @_;
	my $shelf = {};
	$class = ref($class) || $class;
	my $d = \$args->{'debug'} ;
	$shelf->{'debug'} = ${$d};
	if ( ${$d} ) { print {*STDOUT} "$PROGRAM_NAME | new | uid = $UID\n" or croak $ERRNO; }
	bless $shelf,$class;
	return $shelf;
} # end sub new

sub _combine_ts {
my ($shelf,$args) = @_;
my $source_ts = \$args->{'source'} ;
my $target_ts = \$args->{'target'};
#my $source_ts_file = basename ${$source_ts};
#my $source_ts_dir = dirname ${$source_ts};
my $source_ts_dir = ${$source_ts};
my $fps=\$args->{'fps'};
my $dbg=\$args->{'debug'};
my $vdrv = \$args->{'vdrversion'};

#
if ( -e ${$target_ts} ) { return ('target_exist') };
if ( not ( ${$vdrv} ) ) { return ('missing_vdr_version'); };

my $start = {};
my $stop = {};
#
my $indexfile ;

if ( -e "$source_ts_dir/index" ) { $indexfile = "$source_ts_dir/index" }  ;
if ( -e "$source_ts_dir/index.vdr" ) { $indexfile = "$source_ts_dir/index.vdr" }  ;

if ( not ( $indexfile ) ) {
 return ('indexfile not found in combine_ts');
}

$shelf->message({msg=>'combine TS Files',}) ;
$shelf->message({msg=>'get Byte Positions based on marks',debug=>${$dbg},v=>'v',}) ;

my $ref_marks = \$shelf->_parsevdrmarks({dir=>$source_ts_dir,fps=>${$fps},});

my $cutcount = ${$ref_marks}->{'cutcount'}-1;

foreach my $a (0 .. $cutcount) {

my $startframe = ${$ref_marks}->{"start_fps$a"};
my $stopframe = ${$ref_marks}->{"stop_fps$a"};
my ($sta,$staf) = \$shelf->_getoffset({frame=>$startframe,index=>$indexfile,vdrversion=>${$vdrv},});
my ($sto,$stof) = \$shelf->_getoffset({frame=>$stopframe,index=>$indexfile,vdrversion=>${$vdrv},});
$start->{"pos$a"} = ${$sta};
$start->{"file$a"} = ${$staf};

$stop->{"pos$a"} = ${$sto};
$stop->{"file$a"} = ${$stof};

my $t=${$ref_marks}->{"start_time$a"} ;
$shelf->message({msg=>"||cut -> $a time in sek -> $t || frame -> $startframe || byteposition start -> ${$sta} in File ${$staf} stop -> ${$sto} in File ${$stof}",debug=>${$dbg},v=>'vvv',}) ;
}

my $wrkfile = q{};
my $a = 0;
while ($cutcount >= $a ) {
my $rc = q{};
$shelf->message ({msg=>'Combining ts-file using cut-list...',debug=>${$dbg},v=>'v',}) ;

my $filea = $start->{"file$a"};
my $fileb = $stop->{"file$a"};

if ( $filea == $fileb ) {
  $wrkfile = \$shelf->_get_filename_by_cutfilenumber({dir=>$source_ts_dir,fileno=>$start->{"file$a"},});
  $shelf->message ({msg=>"***$filea == $fileb ",debug=>${$dbg},v=>'vvv',}) ;
  $rc = \$shelf->_cutfile ({sourcedir=>$source_ts_dir,
    target=>${$target_ts},
    startpos=>$start->{"pos$a"},
    stoppos=>$stop->{"pos$a"},
    file=>${$wrkfile},
  });
  $wrkfile = q{};
} elsif ( $filea != $fileb ) {
  # cutpart one
  $wrkfile = \$shelf->_get_filename_by_cutfilenumber({dir=>$source_ts_dir,fileno=>$start->{"file$a"},});
  my $bytesizefile = -s ${$wrkfile};
  $shelf->message ({msg=>"***$filea != $fileb ",debug=>${$dbg},v=>'vvv',}) ;
  my $rc1 = \$shelf->_cutfile ({sourcedir=>$source_ts_dir,
    target=>${$target_ts},
    startpos=>$start->{"pos$a"},
    stoppos=>$bytesizefile,
    file=>${$wrkfile},
 });
  $wrkfile = q{};
 # logik wenn fileb nicht die direkte folgen nummer ist sprich 1 != 5 z.b
 if (${$rc1} eq '_cutfile_done') {
  if ( ( $filea + 1 ) == $fileb ) {
  # cutpart two
    $shelf->message ({msg=>"***$filea+1 == $fileb ",debug=>${$dbg},v=>'vvv',}) ;
    $wrkfile = \$shelf->_get_filename_by_cutfilenumber({dir=>$source_ts_dir,fileno=>$stop->{"file$a"},});
    $rc = \$shelf->_cutfile ({sourcedir=>$source_ts_dir,
      target=>${$target_ts},
      startpos=>'0',
      stoppos=>$stop->{"pos$a"},
      file=>${$wrkfile},
    });
    $wrkfile = q{};

  } else {
     my $filecount = $filea+1;
     $shelf->message ({msg=>"***$filecount != $fileb",debug=>${$dbg},v=>'vvv',}) ;
     my $lastmergefile = $fileb-1;
     my $tojoinfiles=q{};
      while ( $lastmergefile >= $filecount ) {
	my $jf = \$shelf->_get_filename_by_cutfilenumber({dir=>$source_ts_dir,fileno=>$filecount,});
	my $filename =  basename ${$jf};
	$tojoinfiles="$tojoinfiles $filename";
	$filecount++;
      }
      $shelf->message ({msg=>"call _joinfiles dir = $source_ts_dir files = $tojoinfiles" ,debug=>${$dbg},v=>'vvv',}) ;
      my $joinrc = \$shelf->_joinfiles({dir=>$source_ts_dir,files=>$tojoinfiles,});
      $shelf->message ({msg=>"_joinfiles return = ${$joinrc}" ,debug=>${$dbg},v=>'vvv',}) ;
      $wrkfile = \$shelf->_get_filename_by_cutfilenumber({dir=>$source_ts_dir,fileno=>$fileb,});
      $rc = \$shelf->_cutfile ({sourcedir=>$source_ts_dir,
	target=>${$target_ts},
	startpos=>'0',
	stoppos=>$stop->{"pos$a"},
	file=>${$wrkfile},
      });
    $wrkfile = q{};
  }
}
}

if (${$rc} eq '_cutfile_done') { $a++ ; }

} # end while

return ('combine_ts_done');

}
sub _get_files_in_dir {
my ( $shelf,$args ) = @_;
my $dir = \$args->{'dir'};
my $p = \$args->{'pattern'};
my $pattern = q{*};
if ( ${$p} ) { $pattern = ${$p} ; }
my @files ;
foreach my $f (bsd_glob "${$dir}/$pattern") {
  push @files,$f;
}
return (@files);
}

sub _get_filename_by_cutfilenumber {
my ( $shelf,$args ) = @_;
my $source_dir = \$args->{'dir'};
my $fileno = \$args->{'fileno'};
my $start_ts = q{};

my @filelist=\$shelf->_get_files_in_dir ({dir=>${$source_dir},});

foreach my $f (@filelist) {
  if (${$f} =~ /(${$fileno})[.](?:vdr|ts)$/smx ) {
    $start_ts = ${$f};
  }
}

return ($start_ts);
}

sub _cutfile {
my ($shelf,$args) = @_;
my $source_ts_dir = \$args->{'sourcedir'} ;
my $target = \$args->{'target'} ;
my $start = \$args->{'startpos'};
my $stop = \$args->{'stoppos'};
my $file = \$args->{'file'};
my $dbg=\$args->{'debug'};
my $buffersize = BYTESHIFT;
my $buffer;
my $cont;
   $shelf->message ({msg=>"cut file ${$file} ( start = ${$start} / stop = ${$stop} )",debug=>${$dbg},v=>'vvv',}) ;
   open my $TOFH, '>>:raw', ${$target} or croak $shelf->message ({msg=>"cannot open ${$target} for writing ... $ERRNO",}) ;
   open my $FH , '<:raw', ${$file} or croak $shelf->message ({msg=>"can´t open ${$file} ... $ERRNO",}) ;
       seek $FH,${$start},0;
       while ($cont = read $FH, $buffer, $buffersize) {
        print {$TOFH} $buffer or croak $ERRNO;
        my $bytepos = tell $FH;
	if ($bytepos >= ${$stop} ) { last ; };
      }
 close $FH or croak $shelf->message({msg=>"can´t close ${$file} $ERRNO",});
 close $TOFH or croak $shelf->message({msg=>"can´t close ${$target} $ERRNO",}) ;
 $shelf->message ({msg=>"cut file ${$file} proccessed",debug=>${$dbg},v=>'v',}) ;
return ('_cutfile_done');
}


sub _getoffset {
my ($shelf,$args) = @_;
my $f = \$args->{'frame'};
my $frame = ${$f}-1;
my $index = \$args->{'index'};
my $startpos = ACHT * $frame ;
my $vdrv=\$args->{'vdrversion'};
my $platform=$Config{'archname'};
my $defaultunpack = 'lssQ' ; # 64 bit perl version for vdr 1.7
my $defaultversion = '1.7';
if ( ${$vdrv} ) { $defaultversion = ${$vdrv} ; }

if ($defaultversion =~ /^1[.]6$/smx ) {
  $defaultunpack = 'lssl';
}

if ( $platform =~ /i486/smx ) {
  $defaultunpack = 'lssLL';
}

if ( not ( ${$index} ) ) { return ('index not found in _getoffset'); }
my ($byteoffset,$byteoffset1,$byteoffset2,$filenumber);

my $buffer = \$shelf->_readindex({index=>${$index},frame=>$startpos,});
if ( $platform =~ /i486/smx ) {
  ($byteoffset1,$byteoffset2,undef,$filenumber) = unpack $defaultunpack, ${$buffer};
  use Math::BigInt;
#    my $sign=($byteoffset1&0x80000000);
#    if($sign) {
#        $byteoffset1^=-1;
#        $byteoffset2^=-1;
#        ++$byteoffset2;
#        $byteoffset2%=2**32;
#        ++$byteoffset1 unless $byteoffset2;
#    }
#    my $i=new Math::BigInt $byteoffset1;
#    $i*=2**32;
#    $i+=$byteoffset2;
#    if ( $sign ) { $i=-$i ; } ;
#    $byteoffset = $i;

my $a = Math::BigInt->from_hex($byteoffset1);
my $b = Math::BigInt->from_hex($byteoffset2);
$byteoffset = $a + $b;

} else {
  ($byteoffset,undef,$filenumber) = unpack $defaultunpack, ${$buffer};
}

return ($byteoffset,$filenumber);
}

sub _readindex {
my ($shelf,$args) = @_;
my $frame = \$args->{'frame'};
my $index = \$args->{'index'};
my $buffer = q{};

open my $INDEX, '<', ${$index} or croak $shelf->message({msg=>"Couldn't open ${$index} $ERRNO"});
  seek $INDEX, ${$frame} ,'0' ;
  read $INDEX, $buffer, ACHT;
close $INDEX or croak $shelf->message({msg=>"Couldn't close ${$index} $ERRNO"});

return ($buffer);
}
sub _joinfiles {
my ($shelf,$args) = @_;
my $dir = \$args->{'dir'};
my $dbg = \$args->{'debug'};
my $files = \$args->{'files'};
my $destfile = \$args->{'destination'};

my $destinationfile='vdrtranscode.ts';

if (${$destfile}) {
  $destinationfile = ${$destfile};
}
my $buffer;
my $copied;
my $fh_out;
my @infiles;
if ( ${$files} =~ /\s/smx ) {
  @infiles = split /\s/smx , ${$files};
} else {
  push @infiles,${$files};
}

my $opentype = '>:raw';

if ( -e "${$dir}/$destinationfile" ) {
  $opentype = '>>:raw';
}

open $fh_out, $opentype , "${$dir}/$destinationfile" or croak "can't open ${$dir}/$destinationfile $ERRNO";
for my $file (@infiles) {
    if ( $file eq q{} ) { next ;};
    $shelf->message ({msg=>"[joinfiles]proccess ${$dir}/$file",debug=>${$dbg},v=>'vvv',});
    open my $fh_in, '<:raw', "${$dir}/$file" or croak "can't open ${$dir}/$file $ERRNO";
    while ($copied = read $fh_in, $buffer, BUFFERSIZE) {
        print {$fh_out} $buffer or croak "can't write to ${$dir}/$destinationfile $ERRNO";
    }
    close $fh_in or croak $ERRNO;
}
close $fh_out or croak $ERRNO;

return ('joindone');
} # end sub _joinfiles

sub _writefile {
my ($shelf,$args) = @_;
my $file = \$args->{'file'};
my $o = \$args->{'options'};
my @content = @{$args->{'content'}};
my $options = q{>};
if (${$o}) {
  $options = ${$o};
}
open my $WRITE ,'>', ${$file} or croak "can't open ${$file} for _writefile $ERRNO";
    flock $WRITE, LOCK_EX or croak "can't lock ${$file} for _writefile $ERRNO";
    foreach my $l (@content) {
      print {$WRITE} "$l\n" or croak "can't write to ${$file} for _writefile $ERRNO";
    }
    flock $WRITE, LOCK_UN or croak "can't close ${$file} for _writefile $ERRNO";
close $WRITE or croak $ERRNO;
return ('writedone');
}

sub _readfile {
my ($shelf,$args) = @_;
my $file = \$args->{'file'};
my @content = ();

if ( not ( -e ${$file} ) ) { return ('filenotexist'); }

open my $FH , '<', ${$file} or croak "can't open ${$file} for _readfile $ERRNO";
  while (<$FH>) {
    chomp;
    push @content,$_;
  }
close $FH or croak $ERRNO;
return (@content);
}

1;